/** @license sf2synth.js 2013 - imaya / GREE Inc. [ https://github.com/gree/sf2synth.js ] The MIT License */
(function() {
    'use strict';

    function k(c) {
        throw c;
    }
    var m = void 0,
        n = null,
        u = !1,
        v = this;

    function w(c, d) {
        var a = c.split("."),
            b = v;
        !(a[0] in b) && b.execScript && b.execScript("var " + a[0]);
        for (var e; a.length && (e = a.shift());) !a.length && d !== m ? b[e] = d : b = b[e] ? b[e] : b[e] = {}
    };

    function y(c, d, a) {
        this.c = c;
        this.destination = d;
        this.b = a;
        this.aa = a.channel;
        this.key = a.key;
        this.Aa = a.velocity;
        this.buffer = a.sample;
        this.playbackRate = a.basePlaybackRate;
        this.sampleRate = a.sampleRate;
        this.volume = a.volume;
        this.S = a.panpot;
        this.l = a.pitchBend;
        this.q = a.pitchBendSensitivity;
        this.ia = a.modEnvToPitch;
        this.startTime = c.currentTime;
        this.u = this.playbackRate
    }
    y.prototype.noteOn = function() {
        var c = this.c,
            d = this.b,
            a = this.buffer,
            b, e, f, g = this.c.currentTime,
            h = g + d.volAttack,
            q = g + d.modAttack,
            l = h + d.volDecay,
            p = q + d.modDecay;
        e = d.loopStart / this.sampleRate;
        f = d.loopEnd / this.sampleRate;
        var r = d.start / this.sampleRate,
            a = a.subarray(0, a.length + d.end);
        b = this.Z = c.createBuffer(1, a.length, this.sampleRate);
        b.getChannelData(0).set(a);
        a = this.t = c.createBufferSource();
        a.buffer = b;
        a.loop = 9 !== this.aa;
        a.loopStart = e;
        a.loopEnd = f;
        A(this, this.l);
        b = this.ma = c.createStereoPanner();
		b.pan.setValueAtTime(this.S, c.currentTime);
        e = this.I = c.createGainNode();
        f = e.gain;
        c = this.filter = c.createBiquadFilter();
        c.type = "lowpass"; //c.LOWPASS;
        f.setValueAtTime(0, g);
        f.linearRampToValueAtTime(this.volume * (this.Aa / 127), h);
        f.linearRampToValueAtTime(this.volume * (1 - d.volSustain), l);
        c.Q.setValueAtTime(d.initialFilterQ * Math.pow(10, 200), g);
        h = 440 * Math.pow(2, (d.initialFilterFc - 6900) / 1200);
        l = 440 * Math.pow(2, (d.initialFilterFc + d.modEnvToFilterFc - 6900) / 1200);
        d = h + (l - h) * (1 - d.modSustain);
        c.frequency.setValueAtTime(h,
            g);
        c.frequency.linearRampToValueAtTime(l, q);
        c.frequency.linearRampToValueAtTime(d, p);
        a.connect(c);
        c.connect(b);
        b.connect(e);
        e.connect(this.destination);
        a.start(0, r)
    };
    y.prototype.noteOff = function() {
        var c = this.b,
            d = this.t,
            a = this.I,
            b = this.c.currentTime,
            e = b + c.volRelease,
            b = b + c.modRelease;
        this.Z && (a.gain.cancelScheduledValues(0), a.gain.linearRampToValueAtTime(0, e), d.playbackRate.cancelScheduledValues(0), d.playbackRate.linearRampToValueAtTime(this.u, b), d.loop = u, d.stop(e), setTimeout(function(a) {
            return function() {
                a.t.disconnect(0);
                a.ma.disconnect(0);
                a.I.disconnect(0)
            }
        }(this), 1E3 * c.volRelease))
    };

    function A(c, d) {
        c.u = c.playbackRate * Math.pow(Math.pow(2, 1 / 12), c.q * (d / (0 > d ? 8192 : 8191)) * c.b.scaleTuning);
        var a = c.t.playbackRate,
            b = c.u,
            e = c.startTime,
            f = c.b,
            g = e + f.modAttack,
            h = g + f.modDecay,
            q = b * Math.pow(Math.pow(2, 1 / 12), c.ia * c.b.scaleTuning);
        a.cancelScheduledValues(0);
        a.setValueAtTime(b, e);
        a.linearRampToValueAtTime(q, g);
        a.linearRampToValueAtTime(b + (q - b) * (1 - f.modSustain), h)
    };

    function C(c, d) {
        d = d || {};
        this.input = c;
        this.j = d.index || 0;
        this.length = d.length || c.length - this.j;
        this.offset = this.j;
        this.padding = d.padding !== m ? d.padding : !0;
        this.$ = d.bigEndian !== m ? d.bigEndian : u
    }

    function aa(c, d, a) {
        this.type = c;
        this.size = d;
        this.offset = a
    }
    C.prototype.parse = function() {
        var c = this.length + this.offset;
        for (this.g = []; this.j < c;) {
            var d = this.input,
                a = this.j,
                b = m;
            this.g.push(new aa(String.fromCharCode(d[a++], d[a++], d[a++], d[a++]), b = this.$ ? (d[a++] << 24 | d[a++] << 16 | d[a++] << 8 | d[a++]) >>> 0 : (d[a++] | d[a++] << 8 | d[a++] << 16 | d[a++] << 24) >>> 0, a));
            a += b;
            this.padding && 1 === (a - this.offset & 1) && a++;
            this.j = a
        }
    };

    function D(c, d) {
        var a = c.g[d];
        return a === m ? n : a
    };

    function I(c, d) {
        d = d || {};
        this.input = c;
        this.na = d.parserOption
    }
    I.prototype.parse = function() {
        var c, d, a = new C(this.input, this.na);
        a.parse();
        1 !== a.g.length && k(Error("wrong chunk length"));
        a = D(a, 0);
        a === n && k(Error("chunk not found"));
        var b = this.input,
            e = a.offset,
            f;
        "RIFF" !== a.type && k(Error("invalid chunk type:" + a.type));
        f = String.fromCharCode(b[e++], b[e++], b[e++], b[e++]);
        "sfbk" !== f && k(Error("invalid signature:" + f));
        a = new C(b, {
            index: e,
            length: a.size - 4
        });
        a.parse();
        3 !== a.g.length && k(Error("invalid sfbk structure"));
        b = D(a, 0);
        e = this.input;
        f = b.offset;
        var g;
        "LIST" !== b.type &&
            k(Error("invalid chunk type:" + b.type));
        g = String.fromCharCode(e[f++], e[f++], e[f++], e[f++]);
        "INFO" !== g && k(Error("invalid signature:" + g));
        (new C(e, {
            index: f,
            length: b.size - 4
        })).parse();
        b = D(a, 1);
        e = this.input;
        f = b.offset;
        "LIST" !== b.type && k(Error("invalid chunk type:" + b.type));
        g = String.fromCharCode(e[f++], e[f++], e[f++], e[f++]);
        "sdta" !== g && k(Error("invalid signature:" + g));
        b = new C(e, {
            index: f,
            length: b.size - 4
        });
        b.parse();
        1 !== b.g.length && k(Error("TODO"));
        this.Y = D(b, 0);
        a = D(a, 2);
        b = this.input;
        e = a.offset;
        "LIST" !==
        a.type && k(Error("invalid chunk type:" + a.type));
        f = String.fromCharCode(b[e++], b[e++], b[e++], b[e++]);
        "pdta" !== f && k(Error("invalid signature:" + f));
        a = new C(b, {
            index: e,
            length: a.size - 4
        });
        a.parse();
        9 !== a.g.length && k(Error("invalid pdta chunk"));
        b = D(a, 0);
        e = this.input;
        f = b.offset;
        g = this.qa = [];
        var h = b.offset + b.size;
        for ("phdr" !== b.type && k(Error("invalid chunk type:" + b.type)); f < h;) g.push({
            ra: String.fromCharCode.apply(n, e.subarray(f, f += 20)),
            pa: e[f++] | e[f++] << 8,
            d: e[f++] | e[f++] << 8,
            U: e[f++] | e[f++] << 8,
            Ca: (e[f++] | e[f++] <<
                8 | e[f++] << 16 | e[f++] << 24) >>> 0,
            Ba: (e[f++] | e[f++] << 8 | e[f++] << 16 | e[f++] << 24) >>> 0,
            Da: (e[f++] | e[f++] << 8 | e[f++] << 16 | e[f++] << 24) >>> 0
        });
        b = D(a, 1);
        e = this.input;
        f = b.offset;
        g = this.sa = [];
        h = b.offset + b.size;
        for ("pbag" !== b.type && k(Error("invalid chunk type:" + b.type)); f < h;) g.push({
            V: e[f++] | e[f++] << 8,
            v: e[f++] | e[f++] << 8
        });
        b = D(a, 2);
        "pmod" !== b.type && k(Error("invalid chunk type:" + b.type));
        this.X = J(this, b);
        b = D(a, 3);
        "pgen" !== b.type && k(Error("invalid chunk type:" + b.type));
        this.W = K(this, b);
        b = D(a, 4);
        e = this.input;
        f = b.offset;
        g = this.b = [];
        h = b.offset + b.size;
        for ("inst" !== b.type && k(Error("invalid chunk type:" + b.type)); f < h;) g.push({
            fa: String.fromCharCode.apply(n, e.subarray(f, f += 20)),
            K: e[f++] | e[f++] << 8
        });
        b = D(a, 5);
        e = this.input;
        f = b.offset;
        g = this.ga = [];
        h = b.offset + b.size;
        for ("ibag" !== b.type && k(Error("invalid chunk type:" + b.type)); f < h;) g.push({
            L: e[f++] | e[f++] << 8,
            ea: e[f++] | e[f++] << 8
        });
        b = D(a, 6);
        "imod" !== b.type && k(Error("invalid chunk type:" + b.type));
        this.N = J(this, b);
        b = D(a, 7);
        "igen" !== b.type && k(Error("invalid chunk type:" + b.type));
        this.M = K(this, b);
        h = D(a, 8);
        a = this.input;
        b = h.offset;
        e = this.ua = [];
        f = this.va = [];
        g = h.offset + h.size;
        var q, l, p, r, s, t, E;
        for ("shdr" !== h.type && k(Error("invalid chunk type:" + h.type)); b < g;) {
            h = String.fromCharCode.apply(n, a.subarray(b, b += 20));
            d = (a[b++] << 0 | a[b++] << 8 | a[b++] << 16 | a[b++] << 24) >>> 0;
            c = (a[b++] << 0 | a[b++] << 8 | a[b++] << 16 | a[b++] << 24) >>> 0;
            q = (a[b++] << 0 | a[b++] << 8 | a[b++] << 16 | a[b++] << 24) >>> 0;
            l = (a[b++] << 0 | a[b++] << 8 | a[b++] << 16 | a[b++] << 24) >>> 0;
            p = (a[b++] << 0 | a[b++] << 8 | a[b++] << 16 | a[b++] << 24) >>> 0;
            r = a[b++];
            s = a[b++] << 24 >>
                24;
            t = a[b++] | a[b++] << 8;
            E = a[b++] | a[b++] << 8;
            c = new Int16Array((new Uint8Array(a.subarray(this.Y.offset + 2 * d, this.Y.offset + 2 * c))).buffer);
            q -= d;
            l -= d;
            if (0 < p) {
                var x = p,
                    B = m,
                    z = m,
                    H = m,
                    F = m;
                for (d = 1; 22050 > x;) {
                    B = new Int16Array(2 * c.length);
                    z = F = 0;
                    for (H = c.length; z < H; ++z) B[F++] = c[z], B[F++] = c[z];
                    c = B;
                    d *= 2;
                    x *= 2
                }
                p *= d;
                q *= d;
                l *= d
            }
            e.push(c);
            f.push({
                Fa: h,
                ya: q,
                ca: l,
                sampleRate: p,
                la: r,
                oa: s,
                Ea: t,
                Ga: E
            })
        }
        this.input = n
    };

    function J(c, d) {
        for (var a = c.input, b = d.offset, e = d.offset + d.size, f, g, h = []; b < e;) {
            b += 2;
            f = a[b++] | a[b++] << 8;
            g = L[f];
            if (g === m) h.push({
                type: g,
                value: {
                    code: f,
                    e: a[b] | a[b + 1] << 8 << 16 >> 16,
                    k: a[b++],
                    i: a[b++]
                }
            });
            else switch (g) {
                case "keyRange":
                case "velRange":
                case "keynum":
                case "velocity":
                    h.push({
                        type: g,
                        value: {
                            k: a[b++],
                            i: a[b++]
                        }
                    });
                    break;
                default:
                    h.push({
                        type: g,
                        value: {
                            e: a[b++] | a[b++] << 8 << 16 >> 16
                        }
                    })
            }
            b += 2;
            b += 2
        }
        return h
    }

    function K(c, d) {
        for (var a = c.input, b = d.offset, e = d.offset + d.size, f, g, h = []; b < e;)
            if (f = a[b++] | a[b++] << 8, g = L[f], g === m) h.push({
                type: g,
                value: {
                    code: f,
                    e: a[b] | a[b + 1] << 8 << 16 >> 16,
                    k: a[b++],
                    i: a[b++]
                }
            });
            else switch (g) {
                case "keynum":
                case "keyRange":
                case "velRange":
                case "velocity":
                    h.push({
                        type: g,
                        value: {
                            k: a[b++],
                            i: a[b++]
                        }
                    });
                    break;
                default:
                    h.push({
                        type: g,
                        value: {
                            e: a[b++] | a[b++] << 8 << 16 >> 16
                        }
                    })
            }
        return h
    }

    function M(c, d, a) {
        var b = [],
            e = {
                za: [],
                keyRange: {
                    i: 127,
                    k: 0
                }
            },
            f;
        for (f = c; f < d; ++f) c = a[f], b.push(c), "unknown" === c.type ? e.za.push(c.value) : e[c.type] = c.value;
        return {
            o: e,
            p: b
        }
    }
    var L = ["startAddrsOffset", "endAddrsOffset", "startloopAddrsOffset", "endloopAddrsOffset", "startAddrsCoarseOffset", "modLfoToPitch", "vibLfoToPitch", "modEnvToPitch", "initialFilterFc", "initialFilterQ", "modLfoToFilterFc", "modEnvToFilterFc", "endAddrsCoarseOffset", "modLfoToVolume", , "chorusEffectsSend", "reverbEffectsSend", "pan", , , , "delayModLFO", "freqModLFO", "delayVibLFO", "freqVibLFO", "delayModEnv", "attackModEnv", "holdModEnv", "decayModEnv", "sustainModEnv", "releaseModEnv", "keynumToModEnvHold", "keynumToModEnvDecay",
        "delayVolEnv", "attackVolEnv", "holdVolEnv", "decayVolEnv", "sustainVolEnv", "releaseVolEnv", "keynumToVolEnvHold", "keynumToVolEnvDecay", "instrument", , "keyRange", "velRange", "startloopAddrsCoarseOffset", "keynum", "velocity", "initialAttenuation", , "endloopAddrsCoarseOffset", "coarseTune", "fineTune", "sampleID", "sampleModes", , "scaleTuning", "exclusiveClass", "overridingRootKey"
    ];

    function P(c) {
        this.input = c;
        this.d = 0;
        this.bufferSize = 1024;
        var d;
        v.AudioContext !== m ? d = new v.AudioContext : v.webkitAudioContext !== m ? d = new v.webkitAudioContext : v.mozAudioContext !== m ? d = new v.mozAudioContext : k(Error("Web Audio not supported"));
        d.createGainNode === m && (d.createGainNode = d.createGain);
        this.c = d;
		if (realdrumDevice) this.c.setSinkId(realdrumDevice.deviceId);
        this.h = this.c.createGainNode();
        this.ba = this.c.createDynamicsCompressor();
        this.s = this.c.createBufferSource();
        this.f = [0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 11, 12, 13, 14, 15];
        this.G = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
        this.C = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        this.D = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        this.F = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        this.m = [
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            []
        ];
        this.B = 1 / 32768;
        this.R = 16384
    }
    var ba = "Acoustic Piano;Bright Piano;Electric Grand Piano;Honky-tonk Piano;Electric Piano;Electric Piano 2;Harpsichord;Clavi;Celesta;Glockenspiel;Musical box;Vibraphone;Marimba;Xylophone;Tubular Bell;Dulcimer;Drawbar Organ;Percussive Organ;Rock Organ;Church organ;Reed organ;Accordion;Harmonica;Tango Accordion;Acoustic Guitar (nylon);Acoustic Guitar (steel);Electric Guitar (jazz);Electric Guitar (clean);Electric Guitar (muted);Overdriven Guitar;Distortion Guitar;Guitar harmonics;Acoustic Bass;Electric Bass (finger);Electric Bass (pick);Fretless Bass;Slap Bass 1;Slap Bass 2;Synth Bass 1;Synth Bass 2;Violin;Viola;Cello;Double bass;Tremolo Strings;Pizzicato Strings;Orchestral Harp;Timpani;String Ensemble 1;String Ensemble 2;Synth Strings 1;Synth Strings 2;Voice Aahs;Voice Oohs;Synth Voice;Orchestra Hit;Trumpet;Trombone;Tuba;Muted Trumpet;French horn;Brass Section;Synth Brass 1;Synth Brass 2;Soprano Sax;Alto Sax;Tenor Sax;Baritone Sax;Oboe;English Horn;Bassoon;Clarinet;Piccolo;Flute;Recorder;Pan Flute;Blown Bottle;Shakuhachi;Whistle;Ocarina;Lead 1 (square);Lead 2 (sawtooth);Lead 3 (calliope);Lead 4 (chiff);Lead 5 (charang);Lead 6 (voice);Lead 7 (fifths);Lead 8 (bass + lead);Pad 1 (Fantasia);Pad 2 (warm);Pad 3 (polysynth);Pad 4 (choir);Pad 5 (bowed);Pad 6 (metallic);Pad 7 (halo);Pad 8 (sweep);FX 1 (rain);FX 2 (soundtrack);FX 3 (crystal);FX 4 (atmosphere);FX 5 (brightness);FX 6 (goblins);FX 7 (echoes);FX 8 (sci-fi);Sitar;Banjo;Shamisen;Koto;Kalimba;Bagpipe;Fiddle;Shanai;Tinkle Bell;Agogo;Steel Drums;Woodblock;Taiko Drum;Melodic Tom;Synth Drum;Reverse Cymbal;Guitar Fret Noise;Breath Noise;Seashore;Bird Tweet;Telephone Ring;Helicopter;Applause;Gunshot".split(";");

    function Q(c) {
        var d, a, b, e, f;
        c = c.T;
        c.parse();
        var g = c.qa,
            h = c.sa,
            q = [],
            l, p, r, s, t;
        s = 0;
        for (t = g.length; s < t; ++s) {
            l = g[s].U;
            p = g[s + 1] ? g[s + 1].U : h.length;
            for (r = []; l < p; ++l) f = M(h[l].V, h[l + 1] ? h[l + 1].V : c.W.length, c.W), b = f.o, d = f.p, e = M(h[l].v, h[l + 1] ? h[l + 1].v : c.X.length, c.X), f = e.o, e = e.p, r.push({
                J: b,
                da: d,
                ja: f,
                ka: e
            }), b = b.instrument !== m ? b.instrument.e : f.instrument !== m ? f.instrument.e : n;
            q.push({
                name: g[s].ra,
                info: r,
                n: g[s],
                b: b
            })
        }
        h = c.b;
        r = c.ga;
        g = [];
        t = 0;
        for (l = h.length; t < l; ++t) {
            p = h[t].K;
            b = h[t + 1] ? h[t + 1].K : r.length;
            s = [];
            for (f = b; p <
                f; ++p) d = M(r[p].L, r[p + 1] ? r[p + 1].L : c.M.length, c.M), b = d.o, e = d.p, a = M(r[p].v, r[p + 1] ? r[p + 1].ea : c.N.length, c.N), d = a.o, a = a.p, s.push({
                J: b,
                da: e,
                ja: d,
                ka: a
            });
            g.push({
                name: h[t].fa,
                info: s
            })
        }
        h = [];
        l = 0;
        for (p = q.length; l < p; ++l)
            if (b = q[l], t = b.n.pa, "number" === typeof b.b && (s = g[b.b], "EOI" !== s.name.replace(/\0*$/, ""))) {
                h[b.n.d] === m && (h[b.n.d] = []);
                r = h[b.n.d];
                r[t] = [];
                r[t].name = b.name;
                b = 0;
                for (f = s.info.length; b < f; ++b) {
                    d = c;
                    e = r[t];
                    a = s.info[b].J;
                    var E = m,
                        x = m,
                        B = m,
                        z = m,
                        H = m,
                        F = m,
                        V = m,
                        W = m,
                        X = m,
                        Y = m,
                        Z = m,
                        N = m,
                        O = m,
                        G = m,
                        $ = m;
                    if (!(a.keyRange === m ||
                            a.sampleID === m)) {
                        B = R(a, "attackVolEnv", -12E3);
                        z = R(a, "decayVolEnv", -12E3);
                        H = R(a, "sustainVolEnv");
                        F = R(a, "releaseVolEnv", -12E3);
                        V = R(a, "attackModEnv", -12E3);
                        W = R(a, "decayModEnv", -12E3);
                        X = R(a, "sustainModEnv");
                        Y = R(a, "releaseModEnv", -12E3);
                        Z = R(a, "coarseTune") + R(a, "fineTune") / 100;
                        N = R(a, "scaleTuning", 100) / 100;
                        O = R(a, "freqVibLFO");
                        G = a.keyRange.k;
                        for ($ = a.keyRange.i; G <= $; ++G) e[G] || (E = R(a, "sampleID"), x = d.va[E], e[G] = {
                            sample: d.ua[E],
                            sampleRate: x.sampleRate,
                            basePlaybackRate: Math.pow(Math.pow(2, 1 / 12), (G - R(a, "overridingRootKey",
                                x.la) + Z + x.oa / 100) * N),
                            modEnvToPitch: R(a, "modEnvToPitch") / 100,
                            scaleTuning: N,
                            start: 32768 * R(a, "startAddrsCoarseOffset") + R(a, "startAddrsOffset"),
                            end: 32768 * R(a, "endAddrsCoarseOffset") + R(a, "endAddrsOffset"),
                            loopStart: x.ya + 32768 * R(a, "startloopAddrsCoarseOffset") + R(a, "startloopAddrsOffset"),
                            loopEnd: x.ca + 32768 * R(a, "endloopAddrsCoarseOffset") + R(a, "endloopAddrsOffset"),
                            volAttack: Math.pow(2, B / 1200),
                            volDecay: Math.pow(2, z / 1200),
                            volSustain: H / 1E3,
                            volRelease: Math.pow(2, F / 1200),
                            modAttack: Math.pow(2, V / 1200),
                            modDecay: Math.pow(2,
                                W / 1200),
                            modSustain: X / 1E3,
                            modRelease: Math.pow(2, Y / 1200),
                            initialFilterFc: R(a, "initialFilterFc", 13500),
                            modEnvToFilterFc: R(a, "modEnvToFilterFc"),
                            initialFilterQ: R(a, "initialFilterQ"),
                            freqVibLFO: O ? 8.176 * Math.pow(2, O / 1200) : m
                        })
                    }
                }
            } return h
    }

    function R(c, d, a) {
        a === m && (a = 0);
        return c[d] ? c[d].e : a
    }
    P.prototype.start = function() {
        this.s.connect(this.h);
        this.h.connect(this.c.destination);
        this.s.start(0);
        this.R = 16383;
        this.h.gain.value = this.B * (16383 / 16384)
    };
    P.prototype.stop = function() {
        this.s.disconnect(0);
        this.h.disconnect(0);
        this.ba.disconnect(0)
    };
    var S = ["Instrument", "Vol", "Pan", "Bend", "Range"];

    function ca(c) {
        var d = c.a = document.createElement("table"),
            a = document.createElement("thead"),
            b = document.createElement("tbody"),
            e, f, g;
		d.classList.add("synthtable"); // BAO	
        a.appendChild(createCol(S, !0, 0));
		
        for (f = 0; 19 > f; ++f) {
            e = createCol(S.length + 128, u, f);
            b.appendChild(e);
			// BAO
            const row = e.querySelector("td:nth-child(1)");
            const cbox = document.createElement("input");
            cbox.setAttribute("type", "checkbox");
			cbox.checked = true;
			cbox.id = "arr-instrument-" + f;
			
            cbox.addEventListener("change", function(evt) {
				console.debug("instrument select", evt.target.id);
            });
			
            row.appendChild(cbox);	
			
			var h = document.createElement("select"), q;
			h.id = "midi-channel-" + f;

            if (15 < f || f == 9) {	
				q = document.createElement("option");
				
				if (f == 9) q.innerHTML = "Midi Drums;";
				if (f == 16) q.innerHTML = "Audio Drums";
				if (f == 17) q.innerHTML = "Audio Bass";
				if (f == 18) q.innerHTML = "Audio Chords";

				h.appendChild(q);				
				h.selectedIndex = 0;
					
            } else {
				
				for (g = 0; 128 > g; ++g) {
					q = document.createElement("option");
					q.textContent = ba[g];
					h.appendChild(q);
				}
				
				h.selectedIndex = c.f[f]				
			}			

			h.setAttribute("style", "width: 165px;");
			e.querySelector("td:nth-child(1)").appendChild(h);
			h.addEventListener("change", function(a, b) {
				return function(c) {
					midiProgramChangeEvent(c.target);
					T(a, b, c.target.selectedIndex)
				}
			}(c, f), u);
				
            e = e.querySelectorAll("td:nth-last-child(-n+128)");

            if (f  < 16) {				
				for (g = 0; 128 > g; ++g) e[g].addEventListener("mousedown", function(a, b, c) {
					return function(d) {
						d.preventDefault();
						a.H = !0;
						a.noteOn(b, c, 127)
					}
				}(c, f, g)), e[g].addEventListener("mouseover", function(a, b, c) {
					return function(d) {
						d.preventDefault();
						a.H && a.noteOn(b, c, 127)
					}
				}(c, f, g)), e[g].addEventListener("mouseout", function(a, b, c) {
					return function(d) {
						d.preventDefault();
						a.noteOff(b,
							c, 0)
					}
				}(c, f, g)), e[g].addEventListener("mouseup", function(a, b, c) {
					return function(d) {
						d.preventDefault();
						a.H = u;
						a.noteOff(b, c, 0)
					}
				}(c, f, g))
			}
        }
        d.appendChild(a);
        d.appendChild(b);
        return d
    }

    function createCol(c, d, row) {
        var a = document.createElement("tr"),
            b, e = c instanceof Array,
            f, g = e ? c.length : c;
			
        for (f = 0; f < g; ++f) {

			if (!d && f == 1) {
				b = document.createElement(d ? "th" : "td");					
				b.setAttribute("colspan", 133);
				const vol = row == 16 ? drumVol : (row == 17 ? bassVol : chordVol);
				b.innerHTML = "<input id='audio-vol-" + row + "' type='range' min=0 max=100 step=1 value=" + vol + " style='width: 200px; accent-color:  #79bbff'>";
				a.appendChild(b);
				
			} else if (f > 1 && f < 5) {				
				b = document.createElement(d ? "th" : "td");
				b.style.display = "none";
				a.appendChild(b);				
			} else {
				b = document.createElement(d ? "th" : "td");
				b.textContent = e && c[f] !== m ? c[f] : "";
				a.appendChild(b);					
			}
		}
        return a
    }
    P.prototype.noteOn = function(c, d, a) {
        var b = this.r[9 === c ? 128 : this.d][this.f[c]];
		// TODO
        this.a && this.a.querySelector("tbody > tr:nth-child(" + (parseInt(c) + 1) + ") > td:nth-child(" + (S.length + parseInt(d) + 1) + ")").classList.add("note-on");
        if (b)
            if (b = b[d]) {
                var e = this.C[c] - 64;
                b.channel = c;
                b.key = d;
                b.velocity = a;
                b.panpot = e / (0 > e ? 64 : 63);
                b.volume = this.G[c] / 127;
                b.pitchBend = this.D[c] - 8192;
                b.pitchBendSensitivity = this.F[c];
                d = new y(this.c, this.h, b);
                d.noteOn();
                this.m[c].push(d)
            } //else v.console.warn("instrument not found: bank=%s instrument=%s channel=%s key=%s", 9 === c ? 128 : this.d, this.f[c], c, d);
        //else v.console.warn("instrument not found: bank=%s instrument=%s channel=%s", 9 === c ? 128 : this.d, this.f[c], c)
    };
    P.prototype.noteOff = function(c, d) {
        var a = this.r[9 === c ? 128 : this.d][this.f[c]],
            b, e = this.m[c],
            f;
		// TODO
        this.a && this.a.querySelector("tbody > tr:nth-child(" + (parseInt(c) + 1) + ") > td:nth-child(" + (parseInt(d) + S.length + 1) + ")").classList.remove("note-on");
        if (a) {
            a = 0;
            for (b = e.length; a < b; ++a) f = e[a], f.key === d && (f.noteOff(), e.splice(a, 1), --a, --b)
        }
    };

    function T(c, d, a) {
        c.a && 9 !== d && (c.a.querySelector("tbody > tr:nth-child(" + (d + 1) + ") > td:first-child > select").selectedIndex = a);
        9 !== d && (c.f[d] = a)
    }

    function ea(c, d, a) { // volume
        c.a && (c.a.querySelector("tbody > tr:nth-child(" + (d + 1) + ") > td:nth-child(2)").querySelector('input').value = a);
        c.G[d] = a
    }

    function fa(c, d, a) {
        c.a && (c.a.querySelector("tbody > tr:nth-child(" + (d + 1) + ") > td:nth-child(3)").textContent = a);
        c.C[d] = a
    }
    P.prototype.l = function(c, d, a) {
        d = d & 127 | (a & 127) << 7;
        var b, e = this.m[c],
            f = d - 8192;
        this.a && (this.a.querySelector("tbody > tr:nth-child(" + (c + 1) + ") > td:nth-child(4)").textContent = f);
        a = 0;
        for (b = e.length; a < b; ++a) A(e[a], f);
        this.D[c] = d
    };
    P.prototype.q = function(c, d) {
        this.a && (this.a.querySelector("tbody > tr:nth-child(" + (c + 1) + ") > td:nth-child(5)").textContent = d);
        this.F[c] = d
    };

    function U() {
        this.A = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        this.z = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        this.ha = this.onmessage.bind(this);
        window.addEventListener("DOMContentLoaded", function() {
            this.ta = !0
        }.bind(this), u)
    }
    U.prototype.xa = function(c) {
        this.ta ? this.load(c) : window.addEventListener("DOMContentLoaded", function a() {
            window.removeEventListener("DOMContentLoaded", a, u);
            this.load(c)
        }.bind(this), u)
    };
    U.prototype.load = function(c) {
        var d = new XMLHttpRequest;
        d.open("GET", c, !0);
        d.responseType = "arraybuffer";
        d.addEventListener("load", function(a) {
            a = a.target;
            this.onload(a.response);
            "function" === typeof this.O && this.O(a.response)
        }.bind(this), u);
        d.send()
    };
    U.prototype.onload = function(c) {
        c = new Uint8Array(c);
        this.P(c)
    };
    U.prototype.P = function(c) {
        var d;
        if (this.w) d = this.w, d.input = c, d.T = new I(c), d.r = Q(d);
        else {
            d = this.w = new P(c);
            document.getElementById("synth").appendChild(ca(d));
            c = d;
            var a;
            c.T = new I(c.input);
            c.r = Q(c);
            for (a = 0; 16 > a; ++a) T(c, a, a), ea(c, a, 100), fa(c, a, 64), c.l(a, 0, 64), c.q(a, 2);
            d.start();
            window.addEventListener("message", this.ha, u)
        }
        window.opener ? window.opener.postMessage("link,ready", "*") : window.parent !== window && window.parent.postMessage("link,ready", "*")
    };
    U.prototype.onmessage = function(c) {
        c = c.data.split(",");
        switch (c.shift()) {
            case "midi":
                ga(this, c.map(function(c) {
                    return parseInt(c);
                }));
                break;
            case "link":
                c = c.shift();
                switch (c) {
                    case "reqpatch":
                        window.opener ? window.opener.postMessage("link,patch", "*") : window.parent !== window && window.parent.postMessage("link,patch", "*");
                        break;
                    case "setpatch":
                        break;
                    default:
                        v.console.error("unknown link message:", c)
                }
                break;
            default:
                v.console.error("unknown message type")
        }
    };
    U.prototype.wa = function(c) {
        this.O = c
    };

    function ga(c, d) {
		//console.debug("sf2synth", c, d);
		
        var a = d[0] & 15,
            b = c.w;
        switch (d[0] & 240) {
            case 128:
                b.noteOff(a, d[1], d[2]);
                break;
            case 144:
                0 < d[2] ? b.noteOn(a, d[1], d[2]) : b.noteOff(a, d[1], 0);
                break;
            case 176:
				//console.debug("sf2synth control", c, d, a);
                switch (d[1]) {
                    case 6:
                        switch (c.A[a]) {
                            case 0:
                                switch (c.z[a]) {
                                    case 0:
                                        b.q(a, d[2])
                                }
                        }
                        break;
                    case 7:
                        //console.debug("volume control", a, d[2]);					
                        ea(b, a, d[2]);
                        break;
                    case 10:
                        fa(b, a, d[2]);
                        break;
                    case 120:
                        for (var e = b.m[a]; 0 < e.length;) b.noteOff(a, e[0].key, 0);
                        break;
                    case 121:
                        b.l(a, 0, 64);
                        break;
                    case 32:
                        //console.debug("bank selection", a, d[2]);
                        break;						
                    case 100:
                        c.A[a] = d[2];
                        break;
                    case 101:
                        c.z[a] = d[2]
                }
                break;
            case 192:
                T(b, a, d[1]);
                break;
            case 224:
                b.l(a, d[1], d[2]);
                break;
            case 240:
                switch (d[1]) {
                    case 127:
                        switch (d[3]) {
                            case 4:
                                switch (d[4]) {
                                    case 1:
                                        a = d[5] + (d[6] << 7), b.R = a, b.h.gain.value = b.B * (a / 16384)
                                }
                        }
                }
        }
    };
    w("SoundFont.WebMidiLink", U);
    w("SoundFont.WebMidiLink.prototype.setup", U.prototype.xa);
    w("SoundFont.WebMidiLink.prototype.onmessage", U.prototype.onmessage);	
    w("SoundFont.WebMidiLink.prototype.loadSoundFont", U.prototype.P);
    w("SoundFont.WebMidiLink.prototype.setLoadCallback", U.prototype.wa);
}).call(this);