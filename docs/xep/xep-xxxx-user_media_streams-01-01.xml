<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
  %ents;
  ]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep xmlns="">
<header>
  <title>DISCO</title>
  <abstract>This specification defines a payload format for the ingestion and egress of media streams for music and other media collaborations using WebRTC-based ingestion/egress. </abstract>
  <legal>
    <copyright>This XMPP Extension Protocol is copyright © 1999 – 2023 by the <link url="https://xmpp.org/">XMPP Standards Foundation</link> (XSF).</copyright>
    <permissions>Permission is hereby granted, free of charge, to any person obtaining a copy of this specification (the "Specification"), to make use of the Specification without restriction, including without limitation the rights to implement the Specification in a software program, deploy the Specification in a network service, and copy, modify, merge, publish, translate, distribute, sublicense, or sell copies of the Specification, and to permit persons to whom the Specification is furnished to do so, subject to the condition that the foregoing copyright notice and this permission notice shall be included in all copies or substantial portions of the Specification. Unless separate permission is granted, modified works that are redistributed shall not contain misleading information regarding the authors, title, number, or publisher of the Specification, and shall not claim endorsement of the modified works by the authors, any organization or project to which the authors belong, or the XMPP Standards Foundation.</permissions>
    <warranty>## NOTE WELL: This Specification is provided on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. ##</warranty>
    <liability>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the XMPP Standards Foundation or any author of this Specification be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising from, out of, or in connection with the Specification or the implementation, deployment, or other use of the Specification (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if the XMPP Standards Foundation or such author has been advised of the possibility of such damages.</liability>
    <conformance>This XMPP Extension Protocol has been contributed in full conformance with the XSF's Intellectual Property Rights Policy (a copy of which can be found at &lt;<link url="https://xmpp.org/about/xsf/ipr-policy">https://xmpp.org/about/xsf/ipr-policy</link>&gt; or obtained by writing to XMPP Standards Foundation, P.O. Box 787, Parker, CO 80134 USA).</conformance>
  </legal>
  <number>XXXX</number>
  <status>ProtoXEP</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies/>
  <supersedes/>
  <supersededby/>
  <shortname>user_media_streams</shortname>
  <author>
    <firstname>Dele</firstname>
    <surname>Olajide</surname>
    <email>dele@olajide.net</email>
    <jid>dele.olajide@igniterealtime.org</jid>
  </author>
  <revision>  
    <version>0.0.1</version>
    <date>2023-12-31</date>
    <initials>do</initials>
    <remark>
      <ul>
        <li>Initial version.</li>
      </ul>
    </remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'> 
  <p>While WebRTC specifies the usage of SDPs [RFC8866] and an Offer/Answer model [RFC3264] for creating connections, WebRTC does not define the precise signaling protocols over which SDPs should be exchanged [RFC8825]. In order to establish a WebRTC session between two WebRTC entities, a signaling protocol is usually used to exchange SDPs</p>
  <p>With HTTP/S applications, WHIP and WHEP have been proposed as simple protocols to ingest and egress media streams using WebRTC.</p>
  <p>This specification provideds the means to do likewise in XMPP for communicating user media streams using WebRTC-based ingestion/egress. The WebRTC SDP payload format is transported using IQ stanzas which map directly to WHIP and WHEP REST endpoints.</p>
  <p>This specification does not prescribe a method for the discovery, publishing and subscription of available URIs for WHIP and WHEP. It is assumed that this will be achieved with other XMPP mechanisms like Publish-Subscribe (&xep0060;) or HTTP Online Meetings (&xep0483;) for example.</p>
</section1>
<section1 topic="Requirements" anchor="reqs">
  <ul>
    <li>Be as easy to implement as possible. This is grounded on the idea that most XMPP implementation programming languages already have HTTP libraries available.</li>
    <li>Usable with WebRTC-based broadcasting providers that have no XMPP integration.</li>
    <li>Usable with XMPP client applications that may have no HTTP/S access to the WebRTC-based ingestion/egress service.</li>	
    <li>Anyone who knows the WHIP and WHEP REST Endpoints SHOULD be able to access them as well.</li>
  </ul>
</section1>
<section1 topic="Discovering Support" anchor="disco">
  <section2 topic="Discovery Query" anchor="disco-initiation">
    <p>The server advertises support for WebRTC-based ingestion/egress, as specified by this protocol, by including the "urn:xmpp:whip:0" namespace, as well as "urn:xmpp:whep:0" namespaces in its service discovery information features as specified in in &xep0030;.</p>
    <p>If the server can push ice candidates patches from the WebRTC-based ingestion/egress, it SHOULD include 'urn:xmpp:whip:ice:0' and 'urn:xmpp:whep:ice:0' namespaces. If the WebRTC-based egress supports extensions, then it SHOULD also include the 'urn:xmpp:whep:ext:0' namespace. </p>
    <example caption="Client sends service discovery request to server"><![CDATA[
<iq to='shakespeare.lit'
    from='juliet@capulet.lit/producer'
    id='disco_01'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>]]></example>
    <example caption="Server replies to service discovery request and reports capability for WebRTC-based ingestion, egress, extensions and ice candidate trickles"><![CDATA[
<iq from='shakespeare.lit'
    to='juliet@capulet.lit/producer'
    id='disco_01'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity category='server' type='im' name='Openfire Server'/>
    <feature var='urn:xmpp:whip:0'/>
    <feature var='urn:xmpp:whip:ice:0'/>  	
    <feature var='urn:xmpp:whep:0'/>  
    <feature var='urn:xmpp:whep:ice:0'/>  
    <feature var='urn:xmpp:whep:ext:0'/>    
  </query>
</iq>]]></example>
  </section2>
</section1>
<section1 topic="User Media Streams Workflow" anchor="workflow">
  <section2 topic='User requests server to ingest a media stream' anchor='ingest-media-stream'>   
    <p>A sample protocol flow to ingest a media session from the client</p> 
    <example caption='Client sends a WHIP SDP offer of a media stream to server'><![CDATA[  
<iq from='juliet@capulet.lit/producer' id='ih28sx61' type='set'>
  <whip xmlns='urn:xmpp:whip:0'>
    <sdp>
	  ...... SDP OFFER
    </sdp>
  </whip>
</iq>	
    ]]></example> 
    <example caption='The server responds with a WHIP SDP answer for the client'><![CDATA[  
<iq to='juliet@capulet.lit/producer' id='ih28sx61' from='shakespeare.lit' type='result'>
  <whip xmlns='urn:xmpp:whip:0'>
    <sdp>  
      ...... SDP ANSWER
    </sdp>	
  </whip> 
</iq>	
    ]]></example> 
    <example caption='The server pushes a patched WHIP SDP with ICE candidates'><![CDATA[  
<iq to='juliet@shakespeare.lit/producer' id='87645fg23' from='shakespeare.lit' type='set'>
  <whip xmlns='urn:xmpp:whip:0'>
    <sdp>  
      ...... SDP PATCH
    </sdp>	
  </whip>   
</iq>	
    ]]></example> 		
  </section2>
  
  <section2 topic='Another user requests for user media stream' anchor='egress-media-stream'>   
    <p>A sample protocol flow to egress a user media by the client</p> 
    <example caption='Client requests all active and accessible media streams'><![CDATA[  
<iq to='shakespeare.lit' from='romeo@capulet.lit//consumer' id='ih28sx31' type='get'>
  <whep xmlns='urn:xmpp:whep:0' />
</iq>	
    ]]></example> 	
    <example caption='The server returns a list of media stream identities'><![CDATA[  
<iq to='romeo@capulet.lit//consumer' id='ih28sx31' from='shakespeare.lit' type='result'>
  <whep xmlns='urn:xmpp:whep:0'>
    <item id="ih28sx61">
  </whep>
</iq>	
    ]]></example> 	
    <example caption='Client sends an WHEP SDP offer to receive a specific user media stream'><![CDATA[ 
<iq from='romeo@shakespeare.lit/consumer' id='6338Vbrhrl' type='set'>
  <whep id="ih28sx61" xmlns='urn:xmpp:whep:0'>
    <sdp>  
      ...... SDP OFFER
    </sdp>		
  </whep>
</iq>	
    ]]></example> 
    <example caption='The server responds with an WHEP SDP answer for the client and the available WHEP extensions supported'><![CDATA[  
<iq to='romeo@shakespeare.lit/consumer' id='6338Vbrhrl' from='shakespeare.lit' type='result'>
  <whep id="ih28sx61" xmlns='urn:xmpp:whep:0'>
    <sdp>  
      ...... SDP ANSWER
    </sdp>  
    <exts>
      <ext xmlns='urn:ietf:params:whep:ext:core:server-sent-events' />
      <ext xmlns='urn:ietf:params:whep:ext:core:layer' />		  
    </exts>	
  </whep>  
</iq>	
    ]]></example>  
    <example caption='The server pushes a WHEP simulcast layers server-sent event'><![CDATA[  
<iq to='romeo@shakespeare.lit/consumer' id='3947254qxcf' from='shakespeare.lit' type='set'>
  <whep id="ih28sx61" xmlns='urn:xmpp:whep:0'>
    <ext xmlns='urn:ietf:params:whep:ext:core:server-sent-events'>       
	  ...... JSON PAYLOAD
    </ext>  
  </whep>    
</iq>	
    ]]></example>  
    <example caption='Client selects a simulcast layer'><![CDATA[ 
<iq from='romeo@shakespeare.lit/consumer' id='8453sf42' type='set'>
  <whep id="ih28sx61" xmlns='urn:xmpp:whep:0'>
    <ext xmlns='urn:ietf:params:whep:ext:core:layer'>       
	  ...... JSON PAYLOAD
    </ext> 	
  </whep>
</iq>	
    ]]></example>	
    <example caption='The server pushes a patched WHEP SDP with ICE candidates'><![CDATA[  
<iq to='romeo@shakespeare.lit/consumer' id='54398hdg21' from='shakespeare.lit' type='set'>
  <whep id="ih28sx61" xmlns='urn:xmpp:whep:0'>
    <sdp>  
      ...... SDP PATCH
    </sdp>	
  </whep>   
</iq>	
    ]]></example>      
  </section2>	
</section1> 
<section1 topic="Implementation Notes" anchor="impl">
  <p></p>
</section1>
<section1 topic="Security Considerations" anchor="security">
  <section2 topic="General" anchor="general">
   <ul>
   </ul>
  </section2>
</section1>
<section1 topic="IANA Considerations" anchor="iana">
  <p>This document requires no interaction with the &IANA;</p>
</section1>
<section1 topic="XMPP Registrar Considerations" anchor="registrar">
  <section2 topic="Protocol Namespaces" anchor="registrar-ns">
    <p>This specification defines the following XML namespaces:</p>
    <ul>
      <li>urn:xmpp:whip:0</li>
      <li>urn:xmpp:whip:ice:0</li> 	  
      <li>urn:xmpp:whep:0</li>
      <li>urn:xmpp:whep:ice:0</li>  	  
      <li>urn:xmpp:whep:ext:0</li>    
    </ul>
    <p>Upon advancement of this specification from a status of Experimental to a status of Draft, the &REGISTRAR; shall add the foregoing namespace to the registry located at &NAMESPACES;, as described in Section 4 of &xep0053;.</p>
  </section2>
</section1>
<section1 topic="XML Schema" anchor="schema">
  <code><![CDATA[
<xml version="1.0" encoding="utf8">
<!-- TBD -->
]]></code>
</section1>
</xep>
